syntax = "proto3";

package wego_server.v1;

option go_package = "github.com/weaveworks/weave-gitops/pkg/protos/applications";

import "google/api/annotations.proto";

import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "WeGo Applications API",
      version: "0.1";
      description: "The WeGo Applications API handles operations for Weave GitOps Applications";
    };
    consumes: "application/json";
    produces: "application/json";
};

service Applications {
    /**
    * Authenticate generates jwt token using git provider name and git provider token arguments
    */
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
        option (google.api.http) = {
            post : "/v1/authenticate/{provider_name}"
            body: "*"
        };
    }

    /**
     * ListCommits returns the list of WeGo commits that the authenticated user has access to.
    */
    rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {
        option (google.api.http) = {
            get : "/v1/applications/{name}/commits",
        };
    }
    /**
    * GetReconciledObjects returns a list of objects that were created as a result of the Application.
    * This list is derived by looking at the Kustomization that is associated with an Application.
    * Helm Releases are not currently supported.
    */
    rpc GetReconciledObjects(GetReconciledObjectsReq) returns (GetReconciledObjectsRes) {
        option (google.api.http) = {
            post : "/v1/applications/{automationName}/reconciled_objects"
            body: "*"
        };
    };

    /**
    * GetChildObjects returns the children of a given object, specified by a GroupVersionKind.
    * Not all Kubernets objects have children. For example, a Deployment has a child ReplicaSet, but a Service has no child objects.
    */
    rpc GetChildObjects(GetChildObjectsReq) returns (GetChildObjectsRes) {
        option (google.api.http) = {
            post : "/v1/applications/child_objects"
            body: "*"
        };
    };

    /**
    * GetGithubDeviceCode retrieves a temporary device code for Github authentication.
    * This code is used to start the Github device-flow.
    */
    rpc GetGithubDeviceCode(GetGithubDeviceCodeRequest) returns (GetGithubDeviceCodeResponse) {
        option (google.api.http) = {
            get : "/v1/applications/auth_providers/github"
        };
    }

    /**
    * GetGithubAuthStatus gets the status of the Github device flow authentication requests.
    * Once the user has completed the Github device flow, an access token will be returned.
    * This token will expired in 15 minutes, after which the user will need to complete the flow again
    * to do Git Provider operations.
    */
    rpc GetGithubAuthStatus(GetGithubAuthStatusRequest) returns (GetGithubAuthStatusResponse) {
        option (google.api.http) = {
            post : "/v1/applications/auth_providers/github/status"
            body: "*"
        };
    }

    /**
    * GetGitlabAuthURL returns the URL to initiate a GitLab OAuth PKCE flow.
    * The user must browse to the returned URL to authorize the OAuth callback to the GitOps UI.
    * See the GitLab OAuth docs for more more information:
    * https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
    */
    rpc GetGitlabAuthURL(GetGitlabAuthURLRequest) returns (GetGitlabAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/applications/auth_providers/gitlab"
        };
    }

    /**
    * AuthorizeGitlab exchanges a GitLab code obtained via OAuth callback.
    * The returned token is useable for authentication with the GitOps server only.
    * See the GitLab OAuth docs for more more information:
    * https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
    */
    rpc AuthorizeGitlab(AuthorizeGitlabRequest) returns (AuthorizeGitlabResponse) {
        option (google.api.http) = {
            post : "/v1/applications/auth_providers/gitlab/authorize"
            body: "*"
        };
    }

    /*
    * SyncApplication triggers the Application reconciliation loop.
    */
    rpc SyncApplication(SyncApplicationRequest) returns (SyncApplicationResponse) {
        option (google.api.http) = {
            post : "/v1/applications/{name}/sync"
            body: "*"
        };
    }

    /**
    * ParseRepoURL returns structured data about a git repository URL
    */
    rpc ParseRepoURL(ParseRepoURLRequest) returns(ParseRepoURLResponse) {
        option (google.api.http) = {
            get : "/v1/applications/parse_repo_url"
        };
    }

    /**
    * ValidateProviderToken check to see if the git provider token is still valid
    */
    rpc ValidateProviderToken(ValidateProviderTokenRequest) returns (ValidateProviderTokenResponse) {
        option (google.api.http) = {
            post : "/v1/applications/validate_token"
            body: "*"
        };
    }

    /**
    * Config returns configuration information about the server
    */
    rpc GetFeatureFlags(GetFeatureFlagsRequest) returns (GetFeatureFlagsResponse) {
        option (google.api.http) = {
            get : "/v1/featureflags"
        };
    }

}

message AuthenticateRequest {
    string provider_name = 1;  // The name of the git provider
    string access_token  = 2;  // The token of the git provider
}

message AuthenticateResponse {
    string token = 1;  // The jwt token that was generated using git provider name and git provider token
}

message SyncApplicationRequest {
    string name      = 1;
    string namespace = 2;
}

message SyncApplicationResponse {
    bool success = 1;
}

message Commit {
    string   hash    = 1;  // The hash of the commit
    string   date    = 2;  // The date the commit was made.
    string   author  = 3;  // The author of the commit
    string   message = 4;  // The commit message
    string   url     = 5;  // The commit url
}

message ListCommitsRequest {
    string name      = 1;  // The application name
    string namespace = 2;  // The namespace the application is in
    int32  page_size = 3;
    // Optional. A pagination token returned from a previous call
    // that indicates where this listing should continue from.
    optional int32 page_token = 4;
}

message ListCommitsResponse {
    repeated Commit commits = 1; // A list of commits
    // A pagination token returned from a previous call
    // that indicates from where listing should continue.
    int32 next_page_token = 2;
}

// GroupVersionKind represents an objects Kubernetes API type data
message GroupVersionKind {
    string group   = 1;
    string kind    = 2;
    string version = 3;
}

// UnstructuredObject is a Kubernetes object of an unknown type
message UnstructuredObject {
    GroupVersionKind groupVersionKind = 1;
    string           name             = 2;
    string           namespace        = 3;
    string           uid              = 4;
    string           status           = 5;
}

message GetReconciledObjectsReq {
    string   automationName      = 1;
    string   automationNamespace = 2;
    AutomationKind automationKind = 3;
    repeated GroupVersionKind kinds = 4;
}
// AutomationKind represents the deployment method used
enum AutomationKind {
    Kustomize = 0;
    Helm      = 1;
}

message GetReconciledObjectsRes {
    repeated UnstructuredObject objects = 1;
}


message GetChildObjectsReq {
    GroupVersionKind groupVersionKind = 1;
    string           parentUid        = 2;
}

message GetChildObjectsRes {
    repeated UnstructuredObject objects = 1;
}


message GetGithubDeviceCodeRequest {

}

message GetGithubDeviceCodeResponse {
    string userCode      = 1; // The Github Device Flow code that will be shown to the user
    string deviceCode    = 2; // A code that uniquely identifies a device
    string validationURI = 3; // The URI that the user will visit to complete the flow
    int32  interval      = 4; // How often the client should retry the request
}

message GetGithubAuthStatusRequest {
    string deviceCode = 1; // The deviceCode returned from a GetGithubDeviceCodeResponse
}

message GetGithubAuthStatusResponse {
    string accessToken = 1; // An access token that can be used to interact with the Weave GitOps API.
    string error       = 2; // An error message.
}

enum GitProvider {
    Unknown = 0;
    GitHub  = 1;
    GitLab  = 2;
}

message ParseRepoURLRequest {
    string url = 1; // The URL to be parsed
}

message ParseRepoURLResponse {
    string      name     = 1; // The name of the git repository
    GitProvider provider = 2; // The GitProvider for the repository
    string      owner    = 3; // The person or organization to which this repo belongs
}

message GetGitlabAuthURLRequest {
    string redirectUri = 1; // The URI that GitLab will use to send users back to GitOps.
}

message GetGitlabAuthURLResponse {
    string url = 1; // The URL that users must visit to authorize GitLab authentication.
}

message AuthorizeGitlabRequest {
    string code        = 1; // The challenge code obtained from the OAuth callback
    string redirectUri = 2; // The redirect URI that originated the OAuth flow
}

message AuthorizeGitlabResponse {
    string token = 1; // A token that can be used to authenticate the GitOps API server.
}

message ValidateProviderTokenRequest {
    GitProvider provider = 1;
}

message ValidateProviderTokenResponse {
    bool valid = 1;
}

message GetFeatureFlagsRequest {}

message GetFeatureFlagsResponse {
    map<string, string> flags = 1;
}
